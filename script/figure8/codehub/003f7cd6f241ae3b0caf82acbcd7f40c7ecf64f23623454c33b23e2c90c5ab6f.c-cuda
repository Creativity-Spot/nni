// GLOBALS: input0:float32[768, 48, 128] -> output0:float32[48, 48, 128]
// BACKEND: c-cuda (default)
// CONFIG: {"Foutput0:D0": [-1, 12, 2, 1], "Foutput0:D1": [-1, 2, 2, 1], "Foutput0:D2": [-1, 2, 8, 1], "Foutput0:O": [1, 0, 2], "Foutput0:S": 2, "Foutput0:R": 1}
// COMPUTE_V1: - einstein_v2(" output0[N0, N1, N2] = input0[N0 + 336, N1 + 0, N2 + 0] where N0 in 48 , N1 in 48 , N2 in 128; ", input_dict={ "input0" : { "dtype" : "float32", "shape" : [768, 48, 128]} })


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[768, 48, 128] -> output0:float32[48, 48, 128]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

__forceinline__ __device__ __half max(const __half a, const __half b) { return a > b ? a : b; }
__forceinline__ __device__ __half min(const __half a, const __half b) { return a < b ? a : b; }

#endif


extern "C" __global__ __launch_bounds__(32) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 2
  // [thread_extent] threadIdx.x = 2
  // [thread_extent] blockIdx.y = 12
  // [thread_extent] threadIdx.y = 2
  // [thread_extent] blockIdx.z = 8
  // [thread_extent] threadIdx.z = 8
  output0[(((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2064384))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 256))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2064640))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 12288))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2076672))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 12544))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2076928))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 24576))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2088960))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 24832))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2089216))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 36864))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2101248))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 37120))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2101504))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 49152))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2113536))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 49408))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2113792))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 61440))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2125824))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 61696))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2126080))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 73728))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2138112))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 73984))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2138368))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 86016))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2150400))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 86272))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2150656))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 98304))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2162688))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 98560))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2162944))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 110592))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2174976))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 110848))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2175232))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 122880))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2187264))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 123136))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2187520))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 135168))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2199552))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 135424))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2199808))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 8))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2064392))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 264))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2064648))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 12296))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2076680))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 12552))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2076936))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 24584))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2088968))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 24840))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2089224))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 36872))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2101256))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 37128))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2101512))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 49160))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2113544))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 49416))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2113800))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 61448))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2125832))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 61704))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2126088))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 73736))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2138120))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 73992))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2138376))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 86024))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2150408))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 86280))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2150664))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 98312))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2162696))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 98568))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2162952))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 110600))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2174984))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 110856))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2175240))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 122888))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2187272))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 123144))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2187528))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 135176))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2199560))];
  output0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 135432))] = input0[((((((((((int)blockIdx.x) * 147456) + (((int)threadIdx.x) * 6144)) + (((int)blockIdx.y) * 512)) + (((int)threadIdx.y) * 128)) + (((int)blockIdx.z) * 16)) + ((int)threadIdx.z)) + 2199816))];
}

// Saved Perf = 4.443560e-06 sec / run; Step Produced = 793; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.