// GLOBALS: input0:float32[1], input1:float32[32, 49], input2:float32[32, 49, 768] -> output0:float32[32, 49, 768]
// BACKEND: c-cuda (default)
// CONFIG: {"Foutput0:D0": [-1, 2, 1, 2], "Foutput0:D1": [-1, 1, 1, 1], "Foutput0:D2": [-1, 12, 32, 2], "Foutput0:O": [0, 1, 2], "Foutput0:S": 3, "Foutput0:R": 0}
// COMPUTE_V1: - einstein_v2(" mediate0[N0, N1] = input0[0] where N0 in 32, N1 in 49;  mediate1[N0, N1] = input1[N0, N1] / mediate0[N0, N1]; mediate2[N0, N1, N2] = mediate1[N0, N1] where N2 in 1;   mediate3[N0, N1] = mediate2[N0, N1, 0] ;   mediate4[N0, N1, N2] = mediate3[N0, N1] where N2 in 768;  output0[N0, N1, N2] = input2[N0, N1, N2] - mediate4[N0, N1, N2];", input_dict={ "input0" : { "dtype" : "float32", "shape" : [1]} ,  "input1" : { "dtype" : "float32", "shape" : [32, 49]} ,  "input2" : { "dtype" : "float32", "shape" : [32, 49, 768]} }) ## @:


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[1], input1:float32[32, 49], input2:float32[32, 49, 768] -> output0:float32[32, 49, 768]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

__forceinline__ __device__ __half max(const __half a, const __half b) { return a > b ? a : b; }
__forceinline__ __device__ __half min(const __half a, const __half b) { return a < b ? a : b; }

#endif


extern "C" __global__ __launch_bounds__(32) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ input2, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 8
  // [thread_extent] threadIdx.x = 1
  // [thread_extent] blockIdx.y = 49
  // [thread_extent] threadIdx.y = 1
  // [thread_extent] blockIdx.z = 1
  // [thread_extent] threadIdx.z = 32
  output0[((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)))] = (input2[((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)))] - (input1[(((((int)blockIdx.x) * 196) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 37632))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 37632))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75264))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75264))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 98))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 112896))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 112896))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 147))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 1))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 1))] - (input1[(((((int)blockIdx.x) * 196) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 37633))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 37633))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75265))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75265))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 98))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 112897))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 112897))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 147))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 64))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 64))] - (input1[(((((int)blockIdx.x) * 196) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 37696))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 37696))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75328))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75328))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 98))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 112960))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 112960))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 147))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 65))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 65))] - (input1[(((((int)blockIdx.x) * 196) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 37697))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 37697))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75329))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75329))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 98))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 112961))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 112961))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 147))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 128))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 128))] - (input1[(((((int)blockIdx.x) * 196) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 37760))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 37760))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75392))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75392))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 98))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113024))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113024))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 147))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 129))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 129))] - (input1[(((((int)blockIdx.x) * 196) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 37761))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 37761))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75393))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75393))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 98))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113025))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113025))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 147))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 192))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 192))] - (input1[(((((int)blockIdx.x) * 196) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 37824))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 37824))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75456))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75456))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 98))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113088))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113088))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 147))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 193))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 193))] - (input1[(((((int)blockIdx.x) * 196) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 37825))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 37825))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75457))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75457))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 98))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113089))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113089))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 147))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 256))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 256))] - (input1[(((((int)blockIdx.x) * 196) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 37888))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 37888))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75520))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75520))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 98))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113152))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113152))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 147))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 257))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 257))] - (input1[(((((int)blockIdx.x) * 196) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 37889))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 37889))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75521))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75521))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 98))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113153))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113153))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 147))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 320))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 320))] - (input1[(((((int)blockIdx.x) * 196) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 37952))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 37952))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75584))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75584))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 98))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113216))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113216))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 147))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 321))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 321))] - (input1[(((((int)blockIdx.x) * 196) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 37953))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 37953))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75585))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75585))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 98))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113217))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113217))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 147))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 384))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 384))] - (input1[(((((int)blockIdx.x) * 196) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 38016))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 38016))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75648))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75648))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 98))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113280))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113280))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 147))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 385))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 385))] - (input1[(((((int)blockIdx.x) * 196) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 38017))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 38017))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75649))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75649))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 98))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113281))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113281))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 147))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 448))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 448))] - (input1[(((((int)blockIdx.x) * 196) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 38080))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 38080))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75712))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75712))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 98))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113344))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113344))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 147))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 449))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 449))] - (input1[(((((int)blockIdx.x) * 196) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 38081))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 38081))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75713))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75713))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 98))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113345))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113345))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 147))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 512))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 512))] - (input1[(((((int)blockIdx.x) * 196) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 38144))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 38144))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75776))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75776))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 98))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113408))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113408))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 147))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 513))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 513))] - (input1[(((((int)blockIdx.x) * 196) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 38145))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 38145))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75777))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75777))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 98))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113409))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113409))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 147))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 576))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 576))] - (input1[(((((int)blockIdx.x) * 196) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 38208))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 38208))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75840))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75840))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 98))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113472))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113472))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 147))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 577))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 577))] - (input1[(((((int)blockIdx.x) * 196) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 38209))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 38209))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75841))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75841))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 98))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113473))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113473))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 147))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 640))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 640))] - (input1[(((((int)blockIdx.x) * 196) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 38272))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 38272))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75904))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75904))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 98))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113536))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113536))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 147))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 641))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 641))] - (input1[(((((int)blockIdx.x) * 196) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 38273))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 38273))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75905))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75905))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 98))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113537))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113537))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 147))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 704))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 704))] - (input1[(((((int)blockIdx.x) * 196) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 38336))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 38336))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75968))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75968))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 98))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113600))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113600))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 147))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 705))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 705))] - (input1[(((((int)blockIdx.x) * 196) + ((int)blockIdx.y)))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 38337))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 38337))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 49))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75969))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 75969))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 98))] / input0[(0)]));
  output0[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113601))] = (input2[(((((((int)blockIdx.x) * 150528) + (((int)blockIdx.y) * 768)) + (((int)threadIdx.z) * 2)) + 113601))] - (input1[((((((int)blockIdx.x) * 196) + ((int)blockIdx.y)) + 147))] / input0[(0)]));
}

// Saved Perf = 1.780600e-05 sec / run; Step Produced = 972; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.