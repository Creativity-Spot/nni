// GLOBALS: input0:float32[768], input1:float32[32, 49, 768] -> output0:float32[32, 49, 768]
// BACKEND: c-cuda (default)
// CONFIG: {"Foutput0:D0": [-1, 4, 1, 2], "Foutput0:D1": [-1, 1, 1, 7], "Foutput0:D2": [-1, 1, 64, 1], "Foutput0:O": [0, 2, 1], "Foutput0:S": 3, "Foutput0:R": 1}
// COMPUTE_V1: - einstein_v2(" mediate0[N0, N1, N2] = input0[N2] where N0 in 32, N1 in 49;   output0[N0, N1, N2] = input1[N0, N1, N2] + mediate0[N0, N1, N2]; ", input_dict={ "input0" : { "dtype" : "float32", "shape" : [768]} ,  "input1" : { "dtype" : "float32", "shape" : [32, 49, 768]} }) ## @:  memcpy


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[768], input1:float32[32, 49, 768] -> output0:float32[32, 49, 768]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

__forceinline__ __device__ __half max(const __half a, const __half b) { return a > b ? a : b; }
__forceinline__ __device__ __half min(const __half a, const __half b) { return a < b ? a : b; }

#endif


extern "C" __global__ __launch_bounds__(64) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 4
  // [thread_extent] threadIdx.x = 1
  // [thread_extent] blockIdx.y = 7
  // [thread_extent] threadIdx.y = 1
  // [thread_extent] blockIdx.z = 12
  // [thread_extent] threadIdx.z = 64
  output0[(((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)))] = (input1[(((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 37632))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 37632))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 75264))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 75264))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 112896))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 112896))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 150528))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 150528))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 188160))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 188160))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 225792))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 225792))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 263424))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 263424))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 768))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 768))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 38400))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 38400))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 76032))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 76032))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 113664))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 113664))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 151296))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 151296))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 188928))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 188928))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 226560))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 226560))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 264192))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 264192))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 1536))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 1536))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 39168))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 39168))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 76800))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 76800))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 114432))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 114432))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 152064))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 152064))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 189696))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 189696))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 227328))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 227328))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 264960))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 264960))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 2304))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 2304))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 39936))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 39936))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 77568))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 77568))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 115200))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 115200))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 152832))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 152832))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 190464))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 190464))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 228096))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 228096))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 265728))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 265728))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 3072))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 3072))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 40704))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 40704))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 78336))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 78336))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 115968))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 115968))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 153600))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 153600))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 191232))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 191232))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 228864))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 228864))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 266496))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 266496))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 3840))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 3840))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 41472))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 41472))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 79104))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 79104))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 116736))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 116736))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 154368))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 154368))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 192000))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 192000))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 229632))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 229632))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 267264))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 267264))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 4608))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 4608))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 42240))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 42240))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 79872))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 79872))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 117504))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 117504))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 155136))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 155136))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 192768))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 192768))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 230400))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 230400))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
  output0[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 268032))] = (input1[((((((((int)blockIdx.x) * 301056) + (((int)blockIdx.y) * 5376)) + (((int)blockIdx.z) * 64)) + ((int)threadIdx.z)) + 268032))] + input0[(((((int)blockIdx.z) * 64) + ((int)threadIdx.z)))]);
}

// Saved Perf = 1.780780e-05 sec / run; Step Produced = 902; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.