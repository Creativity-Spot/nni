// GLOBALS: input0:float32[768], input1:float32[32, 49, 768], input2:float32[384, 49, 49] -> output0:float32[384, 49, 64]
// BACKEND: c-cuda (default)
// CONFIG: {"Toutput0:D0": [-1, 1, 2, 1], "Toutput0:D1": [-1, 1, 7, 7], "Toutput0:D2": [-1, 2, 16, 2], "Toutput0:R0": [-1, 1, 7], "Toutput0:RA": 0, "Toutput0:S": 2, "Toutput0:U": 1}
// COMPUTE_V1: - einstein_v2(" mediate0[N0, N1, N2] = input0[N2] where N0 in 32, N1 in 49;   mediate1[N0, N1, N2] = input1[N0, N1, N2] + mediate0[N0, N1, N2];  mediate2[N0, N1, N2, N3] = mediate1[N0, N1, ((N2) * 64 + N3)] where N2 in 12, N3 in 64;   mediate3[N0, N2, N1, N3] = mediate2[N0, N1, N2, N3] ;  mediate4[N0, N1, N2] = mediate3[N0 / 12 % 32, N0 / 1 % 12, N1, N2] where N0 in 384;   mediate5[N0, N1, N2] = mediate4[N0, N1, N2] ;   mediate6[N0, N1, N2] = mediate5[N0, N1, N2] ;   mediate7[N0, N1, N2] = input2[N0, N1, N2] ;   mediate8[N0, N1, N2] = mediate7[N0, N1, N2] ;   output0[B0, N, M] +=! mediate8[B0, N, K] * mediate6[B0, K, M]; ", input_dict={ "input0" : { "dtype" : "float32", "shape" : [768]} ,  "input1" : { "dtype" : "float32", "shape" : [32, 49, 768]} ,  "input2" : { "dtype" : "float32", "shape" : [384, 49, 49]} }) ## @:


// ---------------------------------------------------------------------------
// LOCAL: template_op_kernel0 -- input0:float32[768], input1:float32[32, 49, 768], input2:float32[384, 49, 49] -> output0:float32[384, 49, 64]

#include <cuda_runtime.h>
#include <cuda_fp16.h>
#include <mma.h>

#ifndef __CUDA_COMMON_MACRO__
#define __CUDA_COMMON_MACRO__

#define __ITEM_0_OF__(v) (v).x
#define __ITEM_1_OF__(v) (v).y
#define __ITEM_2_OF__(v) (v).z
#define __ITEM_3_OF__(v) (v).w

#define __STORE_ITEM_0__(t, out, ido, in, idi) *(t*)(out + ido) = *(t*)(in + idi)
#define __STORE_ITEM_1__(t, out, ido, in, idi)
#define __STORE_ITEM_2__(t, out, ido, in, idi)
#define __STORE_ITEM_3__(t, out, ido, in, idi)

#define MAKE_VEC4_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y, l.z + r.z, l.w + r.w); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y, l.z - r.z, l.w - r.w); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y, l.z * r.z, l.w * r.w); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y, l.z / r.z, l.w / r.w); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y, l.z % r.z, l.w % r.w); }
#define MAKE_VEC2_OP(type) \
  __forceinline__ __device__ type operator+(const type &l, const type &r) { return make_##type(l.x + r.x, l.y + r.y); } \
  __forceinline__ __device__ type operator-(const type &l, const type &r) { return make_##type(l.x - r.x, l.y - r.y); } \
  __forceinline__ __device__ type operator*(const type &l, const type &r) { return make_##type(l.x * r.x, l.y * r.y); } \
  __forceinline__ __device__ type operator/(const type &l, const type &r) { return make_##type(l.x / r.x, l.y / r.y); } \
  __forceinline__ __device__ type operator%(const type &l, const type &r) { return make_##type(l.x % r.x, l.y % r.y); }

MAKE_VEC4_OP(int4)
MAKE_VEC2_OP(int2)

__forceinline__ __device__ __half max(const __half a, const __half b) { return a > b ? a : b; }
__forceinline__ __device__ __half min(const __half a, const __half b) { return a < b ? a : b; }

#endif


extern "C" __global__ __launch_bounds__(224) void template_op_kernel0(float* __restrict__ input0, float* __restrict__ input1, float* __restrict__ input2, float* __restrict__ output0) {
  // [thread_extent] blockIdx.x = 192
  // [thread_extent] threadIdx.x = 224
  float output0_local[28];
  output0_local[(0)] = 0.000000e+00f;
  output0_local[(14)] = 0.000000e+00f;
  output0_local[(1)] = 0.000000e+00f;
  output0_local[(15)] = 0.000000e+00f;
  output0_local[(2)] = 0.000000e+00f;
  output0_local[(16)] = 0.000000e+00f;
  output0_local[(3)] = 0.000000e+00f;
  output0_local[(17)] = 0.000000e+00f;
  output0_local[(4)] = 0.000000e+00f;
  output0_local[(18)] = 0.000000e+00f;
  output0_local[(5)] = 0.000000e+00f;
  output0_local[(19)] = 0.000000e+00f;
  output0_local[(6)] = 0.000000e+00f;
  output0_local[(20)] = 0.000000e+00f;
  output0_local[(7)] = 0.000000e+00f;
  output0_local[(21)] = 0.000000e+00f;
  output0_local[(8)] = 0.000000e+00f;
  output0_local[(22)] = 0.000000e+00f;
  output0_local[(9)] = 0.000000e+00f;
  output0_local[(23)] = 0.000000e+00f;
  output0_local[(10)] = 0.000000e+00f;
  output0_local[(24)] = 0.000000e+00f;
  output0_local[(11)] = 0.000000e+00f;
  output0_local[(25)] = 0.000000e+00f;
  output0_local[(12)] = 0.000000e+00f;
  output0_local[(26)] = 0.000000e+00f;
  output0_local[(13)] = 0.000000e+00f;
  output0_local[(27)] = 0.000000e+00f;
  for (int K_outer_outer = 0; K_outer_outer < 7; ++K_outer_outer) {
    __shared__ float mediate8_shared[686];
  // [thread_extent] threadIdx.x = 224
    __syncthreads();
    mediate8_shared[(((int)threadIdx.x))] = input2[(((((((int)blockIdx.x) * 4802) + ((((int)threadIdx.x) / 7) * 49)) + (K_outer_outer * 7)) + (((int)threadIdx.x) % 7)))];
    mediate8_shared[((((int)threadIdx.x) + 224))] = input2[((((((((int)blockIdx.x) * 4802) + ((((int)threadIdx.x) / 7) * 49)) + (K_outer_outer * 7)) + (((int)threadIdx.x) % 7)) + 1568))];
    mediate8_shared[((((int)threadIdx.x) + 448))] = input2[((((((((int)blockIdx.x) * 4802) + ((((int)threadIdx.x) / 7) * 49)) + (K_outer_outer * 7)) + (((int)threadIdx.x) % 7)) + 3136))];
    if (((int)threadIdx.x) < 14) {
      mediate8_shared[((((int)threadIdx.x) + 672))] = input2[((((((((int)blockIdx.x) * 4802) + ((((int)threadIdx.x) / 7) * 49)) + (K_outer_outer * 7)) + (((int)threadIdx.x) % 7)) + 4704))];
    }
    __shared__ float mediate6_shared[896];
  // [thread_extent] threadIdx.x = 224
    mediate6_shared[(((int)threadIdx.x))] = (input1[(((((((((int)blockIdx.x) / 6) * 37632) + (K_outer_outer * 5376)) + ((((int)threadIdx.x) >> 6) * 768)) + ((((int)blockIdx.x) % 6) * 128)) + (((int)threadIdx.x) & 63)))] + input0[((((((int)blockIdx.x) % 6) * 128) + (((int)threadIdx.x) & 63)))]);
    mediate6_shared[((((int)threadIdx.x) + 224))] = (input1[(((((((((int)blockIdx.x) / 6) * 37632) + (K_outer_outer * 5376)) + (((((int)threadIdx.x) + 224) >> 6) * 768)) + ((((int)blockIdx.x) % 6) * 128)) + ((((int)threadIdx.x) + 32) & 63)))] + input0[((((((int)blockIdx.x) % 6) * 128) + ((((int)threadIdx.x) + 32) & 63)))]);
    mediate6_shared[((((int)threadIdx.x) + 448))] = (input1[(((((((((((int)blockIdx.x) * 2) + 1) / 12) * 37632) + (K_outer_outer * 5376)) + ((((int)threadIdx.x) >> 6) * 768)) + ((((((int)blockIdx.x) * 2) + 1) % 12) * 64)) + (((int)threadIdx.x) & 63)))] + input0[((((((((int)blockIdx.x) * 2) + 1) % 12) * 64) + (((int)threadIdx.x) & 63)))]);
    mediate6_shared[((((int)threadIdx.x) + 672))] = (input1[(((((((((((int)blockIdx.x) * 2) + ((((int)threadIdx.x) + 672) / 448)) / 12) * 37632) + (K_outer_outer * 5376)) + (((((int)threadIdx.x) + 224) >> 6) * 768)) + ((((((int)blockIdx.x) * 2) + ((((int)threadIdx.x) + 672) / 448)) % 12) * 64)) + ((((int)threadIdx.x) + 32) & 63)))] + input0[((((((((int)blockIdx.x) * 2) + ((((int)threadIdx.x) + 672) / 448)) % 12) * 64) + ((((int)threadIdx.x) + 32) & 63)))]);
    __syncthreads();
    for (int K_inner = 0; K_inner < 7; ++K_inner) {
      output0_local[(0)] = (output0_local[(0)] + (mediate8_shared[((((((int)threadIdx.x) >> 4) * 49) + K_inner))] * mediate6_shared[(((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)))]));
      output0_local[(14)] = (output0_local[(14)] + (mediate8_shared[((((((int)threadIdx.x) >> 4) * 49) + K_inner))] * mediate6_shared[((((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 32))]));
      output0_local[(1)] = (output0_local[(1)] + (mediate8_shared[((((((int)threadIdx.x) >> 4) * 49) + K_inner))] * mediate6_shared[((((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 1))]));
      output0_local[(15)] = (output0_local[(15)] + (mediate8_shared[((((((int)threadIdx.x) >> 4) * 49) + K_inner))] * mediate6_shared[((((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 33))]));
      output0_local[(2)] = (output0_local[(2)] + (mediate8_shared[(((((((int)threadIdx.x) >> 4) * 49) + K_inner) + 7))] * mediate6_shared[(((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)))]));
      output0_local[(16)] = (output0_local[(16)] + (mediate8_shared[(((((((int)threadIdx.x) >> 4) * 49) + K_inner) + 7))] * mediate6_shared[((((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 32))]));
      output0_local[(3)] = (output0_local[(3)] + (mediate8_shared[(((((((int)threadIdx.x) >> 4) * 49) + K_inner) + 7))] * mediate6_shared[((((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 1))]));
      output0_local[(17)] = (output0_local[(17)] + (mediate8_shared[(((((((int)threadIdx.x) >> 4) * 49) + K_inner) + 7))] * mediate6_shared[((((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 33))]));
      output0_local[(4)] = (output0_local[(4)] + (mediate8_shared[(((((((int)threadIdx.x) >> 4) * 49) + K_inner) + 14))] * mediate6_shared[(((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)))]));
      output0_local[(18)] = (output0_local[(18)] + (mediate8_shared[(((((((int)threadIdx.x) >> 4) * 49) + K_inner) + 14))] * mediate6_shared[((((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 32))]));
      output0_local[(5)] = (output0_local[(5)] + (mediate8_shared[(((((((int)threadIdx.x) >> 4) * 49) + K_inner) + 14))] * mediate6_shared[((((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 1))]));
      output0_local[(19)] = (output0_local[(19)] + (mediate8_shared[(((((((int)threadIdx.x) >> 4) * 49) + K_inner) + 14))] * mediate6_shared[((((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 33))]));
      output0_local[(6)] = (output0_local[(6)] + (mediate8_shared[(((((((int)threadIdx.x) >> 4) * 49) + K_inner) + 21))] * mediate6_shared[(((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)))]));
      output0_local[(20)] = (output0_local[(20)] + (mediate8_shared[(((((((int)threadIdx.x) >> 4) * 49) + K_inner) + 21))] * mediate6_shared[((((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 32))]));
      output0_local[(7)] = (output0_local[(7)] + (mediate8_shared[(((((((int)threadIdx.x) >> 4) * 49) + K_inner) + 21))] * mediate6_shared[((((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 1))]));
      output0_local[(21)] = (output0_local[(21)] + (mediate8_shared[(((((((int)threadIdx.x) >> 4) * 49) + K_inner) + 21))] * mediate6_shared[((((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 33))]));
      output0_local[(8)] = (output0_local[(8)] + (mediate8_shared[(((((((int)threadIdx.x) >> 4) * 49) + K_inner) + 28))] * mediate6_shared[(((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)))]));
      output0_local[(22)] = (output0_local[(22)] + (mediate8_shared[(((((((int)threadIdx.x) >> 4) * 49) + K_inner) + 28))] * mediate6_shared[((((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 32))]));
      output0_local[(9)] = (output0_local[(9)] + (mediate8_shared[(((((((int)threadIdx.x) >> 4) * 49) + K_inner) + 28))] * mediate6_shared[((((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 1))]));
      output0_local[(23)] = (output0_local[(23)] + (mediate8_shared[(((((((int)threadIdx.x) >> 4) * 49) + K_inner) + 28))] * mediate6_shared[((((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 33))]));
      output0_local[(10)] = (output0_local[(10)] + (mediate8_shared[(((((((int)threadIdx.x) >> 4) * 49) + K_inner) + 35))] * mediate6_shared[(((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)))]));
      output0_local[(24)] = (output0_local[(24)] + (mediate8_shared[(((((((int)threadIdx.x) >> 4) * 49) + K_inner) + 35))] * mediate6_shared[((((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 32))]));
      output0_local[(11)] = (output0_local[(11)] + (mediate8_shared[(((((((int)threadIdx.x) >> 4) * 49) + K_inner) + 35))] * mediate6_shared[((((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 1))]));
      output0_local[(25)] = (output0_local[(25)] + (mediate8_shared[(((((((int)threadIdx.x) >> 4) * 49) + K_inner) + 35))] * mediate6_shared[((((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 33))]));
      output0_local[(12)] = (output0_local[(12)] + (mediate8_shared[(((((((int)threadIdx.x) >> 4) * 49) + K_inner) + 42))] * mediate6_shared[(((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)))]));
      output0_local[(26)] = (output0_local[(26)] + (mediate8_shared[(((((((int)threadIdx.x) >> 4) * 49) + K_inner) + 42))] * mediate6_shared[((((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 32))]));
      output0_local[(13)] = (output0_local[(13)] + (mediate8_shared[(((((((int)threadIdx.x) >> 4) * 49) + K_inner) + 42))] * mediate6_shared[((((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 1))]));
      output0_local[(27)] = (output0_local[(27)] + (mediate8_shared[(((((((int)threadIdx.x) >> 4) * 49) + K_inner) + 42))] * mediate6_shared[((((((((int)threadIdx.x) / 112) * 448) + (K_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 33))]));
    }
  }
  for (int N_inner = 0; N_inner < 7; ++N_inner) {
    for (int M_inner = 0; M_inner < 2; ++M_inner) {
      output0[((((((((int)blockIdx.x) * 6272) + ((((int)threadIdx.x) >> 4) * 448)) + (N_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)) + M_inner))] = output0_local[(((N_inner * 2) + M_inner))];
      output0[(((((((((int)blockIdx.x) * 6272) + ((((int)threadIdx.x) >> 4) * 448)) + (N_inner * 64)) + ((((int)threadIdx.x) & 15) * 2)) + M_inner) + 32))] = output0_local[((((N_inner * 2) + M_inner) + 14))];
    }
  }
}

// Saved Perf = 3.052890e-05 sec / run; Step Produced = 579; Planned Steps = 1000;
// Antares Tuning Completed in 1000 steps.